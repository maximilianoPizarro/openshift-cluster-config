---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argocd-scc-manager # A ClusterRole that grants SCC management permissions
rules:
  - apiGroups: ["security.openshift.io"]
    resources: ["securitycontextconstraints"]
    verbs: ["create", "get", "list", "watch", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argocd-scc-manager-binding # Binds the above ClusterRole to the Argo CD ServiceAccount
subjects:
  - kind: ServiceAccount
    name: openshift-gitops-argocd-application-controller # The exact name of your Argo CD Application Controller ServiceAccount
    namespace: openshift-gitops # The namespace where your Argo CD is installed
roleRef:
  kind: ClusterRole
  name: argocd-scc-manager # Must match the ClusterRole name defined above
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: gitlab-nginx-final-scc
  annotations:
    argocd.argoproj.io/sync-wave: "2"
allowPrivilegeEscalation: false # As per your generated pod
requiredDropCapabilities:
- ALL
allowedCapabilities:
- NET_BIND_SERVICE # Essential for NGINX
runAsUser:
  type: MustRunAs
  uid: 101 # NGINX's user
runAsGroup:
  type: MustRunAs
  uid: 82 # NGINX's group
fsGroup:
  type: RunAsAny
supplementalGroups:
  type: RunAsAny
seLinuxContext:
  type: RunAsAny
priority: 100 # HIGH PRIORITY to ensure it's picked over restricted-v2
users: [] # This list is populated by the ClusterRoleBinding
volumes:
- configMap
- downwardAPI
- emptyDir
- persistentVolumeClaim
- projected
- secret
# --- ADD THIS BLOCK ---
seccompProfiles:
- runtime/default # Allow the 'RuntimeDefault' seccomp profile
- unconfined      # Allow 'Unconfined' as a fallback/option