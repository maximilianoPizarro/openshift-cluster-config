apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: dotnet-test
  namespace: pminkows-cicd
spec:
  params:
    - default: >-
        image-registry.openshift-image-registry.svc:5000/openshift/dotnet:latest
      description: Dotnet image
      name: DOTNET_IMAGE
      type: string
    - default: .
      description: >-
        The context directory within the repository for sources on which we want
        to execute dotnet goals.
      name: TEST_DIR
      type: string
  steps:
    - image: $(params.DOTNET_IMAGE)
      name: test-command
      resources: {}
      script: |
        #!/usr/bin/env bash
        dotnet test
      workingDir: $(workspaces.source.path)/$(params.TEST_DIR)
  workspaces:
    - name: source
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: maven-get-project-version
  namespace: pminkows-cicd
spec:
  params:
    - default: >-
        image-registry.openshift-image-registry.svc:5000/openshift/java:latest
      description: Maven base image
      name: MAVEN_IMAGE
      type: string
    - default: .
      description: >-
        The context directory within the repository for sources on which we want
        to execute maven goals.
      name: CONTEXT_DIR
      type: string
  results:
    - description: Project version read from pom.xml
      name: version
  steps:
    - image: $(params.MAVEN_IMAGE)
      name: mvn-command
      resources: {}
      script: >
        #!/usr/bin/env bash

        VERSION=$(/usr/bin/mvn help:evaluate -Dexpression=project.version -q
        -DforceStdout)

        echo -n $VERSION | tee $(results.version.path)
      workingDir: $(workspaces.source.path)/$(params.CONTEXT_DIR)
  workspaces:
    - name: source
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: nodejs-get-project-version
  namespace: pminkows-cicd
spec:
  params:
    - default: >-
        image-registry.openshift-image-registry.svc:5000/openshift/nodejs:latest
      description: Nodejs base image
      name: NODEJS_IMAGE
      type: string
    - default: .
      description: >-
        The context directory within the repository for sources on which we want
        to execute maven goals.
      name: CONTEXT_DIR
      type: string
  results:
    - description: Project version read from package.json
      name: version
  steps:
    - image: $(params.NODEJS_IMAGE)
      name: npm-command
      resources: {}
      script: >
        #!/usr/bin/env bash

        VERSION=$(cat package.json | jq -r '.version')

        echo -n $VERSION | tee $(results.version.path)
      workingDir: $(workspaces.source.path)/$(params.CONTEXT_DIR)
  workspaces:
    - name: source
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sonarqube-scanner
  namespace: pminkows-cicd
  labels:
    app.kubernetes.io/version: '0.1'
spec:
  description: >-
    The following task can be used to perform static analysis on the source code
    provided the SonarQube server is hosted

    SonarQube is the leading tool for continuously inspecting the Code Quality
    and Security of your codebases, all while empowering development teams.
    Analyze over 25 popular programming languages including C#, VB.Net,
    JavaScript, TypeScript and C++. It detects bugs, vulnerabilities and code
    smells across project branches and pull requests.
  params:
    - default: ''
      description: Host URL where the sonarqube server is running
      name: SONAR_HOST_URL
      type: string
    - default: ''
      description: Project's unique key
      name: SONAR_PROJECT_KEY
      type: string
  steps:
    - image: 'registry.access.redhat.com/ubi8/ubi-minimal:8.6'
      name: sonar-properties-create
      resources: {}
      script: >
        #!/usr/bin/env bash


        replaceValues() {
          filename=$1
          thekey=$2
          newvalue=$3

          if ! grep -R "^[#]*\s*${thekey}=.*" $filename >/dev/null; then
            echo "APPENDING because '${thekey}' not found"
            echo "" >>$filename
            echo "$thekey=$newvalue" >>$filename
          else
            echo "SETTING because '${thekey}' found already"
            sed -ir "s|^[#]*\s*${thekey}=.*|$thekey=$newvalue|" $filename
          fi
        }


        if [[ -f $(workspaces.sonar-settings.path)/sonar-project.properties ]];
        then
          echo "using user provided sonar-project.properties file"
          cp $(workspaces.sonar-settings.path)/sonar-project.properties $(workspaces.source-dir.path)/sonar-project.properties
          ls -la $(workspaces.source-dir.path)
        fi


        if [[ -f $(workspaces.source-dir.path)/sonar-project.properties ]]; then
          if [[ -n "$(params.SONAR_HOST_URL)" ]]; then
            replaceValues $(workspaces.source-dir.path)/sonar-project.properties sonar.host.url $(params.SONAR_HOST_URL)
          fi
          if [[ -n "$(params.SONAR_PROJECT_KEY)" ]]; then
            replaceValues $(workspaces.source-dir.path)/sonar-project.properties sonar.projectKey $(params.SONAR_PROJECT_KEY)
          fi
        else
          touch sonar-project.properties
          echo "sonar.projectKey=$(params.SONAR_PROJECT_KEY)" >> sonar-project.properties
          echo "sonar.host.url=$(params.SONAR_HOST_URL)" >> sonar-project.properties
          echo "sonar.sources=." >> sonar-project.properties
        fi


        echo "---------------------------"

        cat $(workspaces.source-dir.path)/sonar-project.properties
      workingDir: $(workspaces.source-dir.path)
    - command:
        - sonar-scanner
      image: >-
        docker.io/sonarsource/sonar-scanner-cli:latest
      name: sonar-scan
      resources: {}
      workingDir: $(workspaces.source-dir.path)
  workspaces:
    - name: source-dir
    - name: sonar-settings
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    tekton.dev/displayName: s2i dotnet multiproj
    tekton.dev/pipelines.minVersion: '0.19'
    tekton.dev/tags: 's2i, dotnet, workspace'
  name: s2i-dotnet-multiproj
  labels:
    app.kubernetes.io/version: '1.0'
    operator.tekton.dev/provider-type: piomin
spec:
  description: s2i-dotnet .NET custom task for multi-project builds
  params:
    - default: registry.access.redhat.com/ubi8/buildah:latest
      description: The location of the buildah builder image.
      name: BUILDER_IMAGE
      type: string
    - default: latest
      description: The tag of .NET imagestream for .NET version
      name: VERSION
      type: string
    - default: app.csproj
      description: The file with project .csproj
      name: APP_PROJECT
      type: string
    - default: .
      description: The location of the path to run s2i from.
      name: PATH_CONTEXT
      type: string
    - default: 'true'
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      name: TLSVERIFY
      type: string
    - description: Location of the repo where image has to be pushed
      name: IMAGE
      type: string
  results:
    - description: Digest of the image just built.
      name: IMAGE_DIGEST
  steps:
    - command:
        - s2i
        - build
        - $(params.PATH_CONTEXT)
        - >-
          image-registry.openshift-image-registry.svc:5000/openshift/dotnet:$(params.VERSION)
        - '--as-dockerfile'
        - /gen-source/Dockerfile.gen
        - '--env'
        - DOTNET_STARTUP_PROJECT=$(params.APP_PROJECT)
      env:
        - name: HOME
          value: /tekton/home
      image: registry.redhat.io/ocp-tools-4-tech-preview/source-to-image-rhel8:v1.3.1
      name: generate
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source
      workingDir: $(workspaces.source.path)
    - command:
        - buildah
        - bud
        - '--storage-driver=vfs'
        - '--tls-verify=$(params.TLSVERIFY)'
        - '--layers'
        - '-f'
        - /gen-source/Dockerfile.gen
        - '-t'
        - $(params.IMAGE)
        - .
      image: $(params.BUILDER_IMAGE)
      name: build
      resources: {}
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /gen-source
          name: gen-source
      workingDir: /gen-source
    - command:
        - buildah
        - push
        - '--storage-driver=vfs'
        - '--tls-verify=$(params.TLSVERIFY)'
        - '--digestfile=$(workspaces.source.path)/image-digest'
        - $(params.IMAGE)
        - 'docker://$(params.IMAGE)'
      image: $(params.BUILDER_IMAGE)
      name: push
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: $(workspaces.source.path)
    - image: $(params.BUILDER_IMAGE)
      name: digest-to-results
      script: >-
        cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
  volumes:
    - emptyDir: {}
      name: varlibcontainers
    - emptyDir: {}
      name: gen-source
  workspaces:
    - mountPath: /workspace/source
      name: source
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: send-to-jira
  namespace: pminkows-cicd
  labels:
    app.kubernetes.io/version: "1.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
spec:
  description: These task creates issue in jira.
  params:
    - name: title
      type: string
      description: Title of issue
    - name: project-key
      type: string
      description: A key of JIRA project
    - name: token-secret-name
      type: string
      description: JIRA token
    - name: username
      type: string
      description: JIRA login
    - name: url
      type: string
      description: JIRA address
    - name: content
      type: string
      description: JIRA description
      default: ''
  results:
    - description: The issue id
      name: issue-id
  steps:
    - name: post
      image: docker.io/badouralix/curl-jq:latest
      script: |
        #!/bin/sh
        JSON="{\"fields\":{\"project\":{\"key\":\"${PROJECT_KEY}\"},\"summary\":\"${TITLE}\",\"description\":\"${CONTENT}\",\"issuetype\":{\"name\":\"Task\"}}}"
        echo $JSON | sed -e 's/\"/\\\\"/g'
        curl -X POST -H 'Content-Type: application/json' -d "${JSON}" https://${URL}/rest/api/2/issue -u ${USERNAME}:${TOKEN} | jq .id -r | tee $(results.issue-id.path)
      env:
        - name: TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.token-secret-name)
              key: token
        - name: USERNAME
          value: $(params.username)
        - name: URL
          value: $(params.url)
        - name: TITLE
          value: $(params.title)
        - name: PROJECT_KEY
          value: $(params.project-key)
        - name: CONTENT
          value: $(params.content)
  workspaces:
    - name: source
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    openshift.io/installed-from: tektonhub
    tekton.dev/categories: Security
    tekton.dev/displayName: Policy check an image with Red Hat Advanced Cluster Security
    tekton.dev/pipelines.minVersion: 0.18.0
    tekton.dev/platforms: linux/amd64
    tekton.dev/tags: security
  name: rhacs-image-check
  namespace: pminkows-cicd
  labels:
    app.kubernetes.io/version: '3.71'
spec:
  description: >-
    Policy check an image with Red Hat Advanced Cluster Security.

    This tasks allows you to check an image against build-time policies and
    apply enforcement to fail builds.  It's a companion to the rhacs-image-scan
    task, which returns full vulnerability scan results for an image.
  params:
    - default: rox-central-endpoint
      description: >-
        Name of secret containing the address:port tuple for RHACS Stackrox
        Central.
      name: rox_central_endpoint
      type: string
    - default: rox-api-token
      description: >-
        Name of secret containing the RHACS StackRox API token with CI
        permissions.
      name: rox_api_token
      type: string
    - default: 'quay.io/stackrox-io/roxctl:3.71.0'
      description: Image providing the roxctl tool.
      name: rox_image
      type: string
    - default: $(params.IMAGE)
      description: >
        Full name of image to check.

        Examples: 'gcr.io/rox/sample:5.0-rc1', '$(params.IMAGE)',
        '$(params.IMAGE)@$(tasks.buildah.results.IMAGE_DIGEST)'
      name: image
      type: string
    - default: table
      description: Results output format (csv | json | junit | table)
      name: output_format
      type: string
    - default: 'false'
      description: >
        Do not verify TLS certificates.


        When set to "true", skip verifying the TLS certs of the Central endpoint
        and registry.
      name: insecure-skip-tls-verify
      type: string
  results:
    - description: Output of `roxctl image check`
      name: check_output
      type: string
  steps:
    - args:
        - image
        - check
        - '--endpoint=$(ROX_CENTRAL_ENDPOINT)'
        - '--insecure-skip-tls-verify=$(INSECURE)'
        - '--output=$(OUTPUT)'
        - '--image=$(IMAGE)'
      env:
        - name: HOME
          value: /tekton/home
        - name: IMAGE
          value: $(params.image)
        - name: INSECURE
          value: $(params.insecure-skip-tls-verify)
        - name: OUTPUT
          value: $(params.output_format)
        - name: ROX_API_TOKEN
          valueFrom:
            secretKeyRef:
              key: rox_api_token
              name: $(params.rox_api_token)
        - name: ROX_CENTRAL_ENDPOINT
          valueFrom:
            secretKeyRef:
              key: rox_central_endpoint
              name: $(params.rox_central_endpoint)
      image: $(params.rox_image)
      name: rox-image-check
      resources: {}
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/categories: Security
    tekton.dev/displayName: Scan an image for vulnerabilities with Red Hat Advanced Cluster Security
    tekton.dev/pipelines.minVersion: 0.18.0
    tekton.dev/platforms: linux/amd64
    tekton.dev/tags: security
  name: rhacs-image-scan
  namespace: pminkows-cicd
  labels:
    app.kubernetes.io/version: '3.71'
spec:
  description: >-
    Scan an image with Red Hat Advanced Cluster Security.

    This task allows you to return full vulnerability scan results for an image
    in CSV, Table, or JSON formats. The companion rhacs-image-check task checks
    an image against build-time policies.
  params:
    - default: rox-central-endpoint
      description: >-
        Name of secret containing the address:port tuple for RHACS Stackrox
        Central.
      name: rox_central_endpoint
      type: string
    - default: rox-api-token
      description: >-
        Name of secret containing the RHACS StackRox API token with CI
        permissions.
      name: rox_api_token
      type: string
    - default: 'quay.io/stackrox-io/roxctl:3.71.0'
      description: Image providing the roxctl tool.
      name: rox_image
      type: string
    - default: $(params.IMAGE)
      description: >
        Full name of image to scan.


        SHA 256 digest may be included to ensure scan of sequental runs with
        same tag.

        Examples: 'gcr.io/rox/sample:5.0-rc1', '$(params.IMAGE)',
        '$(params.IMAGE)@$(tasks.buildah.results.IMAGE_DIGEST)'
      name: image
      type: string
    - default: json
      description: Results output format (json | csv | table)
      name: output_format
      type: string
    - default: 'false'
      description: >
        Do not verify TLS certificates.


        When set to "true", skip verifying the TLS certs of the Central endpoint
        and registry.
      name: insecure-skip-tls-verify
      type: string
  steps:
    - args:
        - image
        - scan
        - '--endpoint=$(ROX_CENTRAL_ENDPOINT)'
        - '--insecure-skip-tls-verify=$(INSECURE)'
        - '--output=$(OUTPUT)'
        - '--image=$(IMAGE)'
      stdoutConfig:
        path: $(workspaces.source.path)/roxctl-stdout
      env:
        - name: HOME
          value: /tekton/home
        - name: IMAGE
          value: $(params.image)
        - name: INSECURE
          value: $(params.insecure-skip-tls-verify)
        - name: OUTPUT
          value: $(params.output_format)
        - name: ROX_API_TOKEN
          valueFrom:
            secretKeyRef:
              key: rox_api_token
              name: $(params.rox_api_token)
        - name: ROX_CENTRAL_ENDPOINT
          valueFrom:
            secretKeyRef:
              key: rox_central_endpoint
              name: $(params.rox_central_endpoint)
      image: $(params.rox_image)
      name: rox-image-scan
      resources: {}
  workspaces:
    - name: source
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: add-jira-attachment
  namespace: pminkows-cicd
  labels:
    app.kubernetes.io/version: "1.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
spec:
  description: These task creates issue in jira.
  params:
    - name: token-secret-name
      type: string
      description: JIRA token
    - name: username
      type: string
      description: JIRA login
    - name: url
      type: string
      description: JIRA address
    - name: file-name
      type: string
      description: attachment name
    - name: issue-key
      type: string
      description: issue key
  steps:
    - name: post
      image: docker.io/badouralix/curl-jq:latest
      script: |
        #!/bin/sh
        echo ${FILE_NAME}
        ISSUE=$(echo ${ISSUE_KEY} | xargs)
        curl -X POST -H 'X-Atlassian-Token: no-check' --form 'file=@"roxctl-stdout"' https://${URL}/rest/api/2/issue/${ISSUE}/attachments -u ${USERNAME}:${TOKEN}
      env:
        - name: TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.token-secret-name)
              key: token
        - name: USERNAME
          value: $(params.username)
        - name: URL
          value: $(params.url)
        - name: ISSUE_KEY
          value: $(params.issue-key)
        - name: FILE_NAME
          value: $(params.file-name)
      workingDir: $(workspaces.source.path)
  workspaces:
    - name: source
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    tekton.dev/tags: 's2i, java, workspace'
  name: s2i-java-ext
  labels:
    app.kubernetes.io/version: '1.0'
    operator.tekton.dev/operand-name: openshift-pipelines-addons
    operator.tekton.dev/provider-type: piomin
spec:
  description: >-
    s2i-java task clones a Git repository and builds and pushes a container
    image using S2I and a Java builder image.
  params:
    - default: latest
      description: The tag of java imagestream for java version
      name: VERSION
      type: string
    - default: .
      description: The location of the path to run s2i from
      name: PATH_CONTEXT
      type: string
    - default: 'true'
      description: >-
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      name: TLSVERIFY
      type: string
    - default: ''
      description: Additional Maven arguments
      name: MAVEN_ARGS_APPEND
      type: string
    - default: 'false'
      description: Remove the Maven repository after the artifact is built
      name: MAVEN_CLEAR_REPO
      type: string
    - default: ''
      description: The base URL of a mirror used for retrieving artifacts
      name: MAVEN_MIRROR_URL
      type: string
    - description: Location of the repo where image has to be pushed
      name: IMAGE
      type: string
    - default: >-
        registry.redhat.io/rhel8/buildah@sha256:b48f410efa0ff8ab0db6ead420a5d8d866d64af846fece5efb185230d7ecf591
      description: The location of the buildah builder image.
      name: BUILDER_IMAGE
      type: string
    - default: 'false'
      description: Skip pushing the built image
      name: SKIP_PUSH
      type: string
    - default: []
      description: Environment variables to set during _build-time_.
      name: ENV_VARS
      type: array
  results:
    - description: Digest of the image just built.
      name: IMAGE_DIGEST
      type: string
  steps:
    - args:
        - '$(params.ENV_VARS[*])'
      env:
        - name: HOME
          value: /tekton/home
      image: >-
        registry.redhat.io/source-to-image/source-to-image-rhel8@sha256:6a6025914296a62fdf2092c3a40011bd9b966a6806b094d51eec5e1bd5026ef4
      name: generate
      resources: {}
      script: >
        echo "MAVEN_CLEAR_REPO=$(params.MAVEN_CLEAR_REPO)" > /env-vars/env-file


        [[ '$(params.MAVEN_ARGS_APPEND)' != "" ]] &&
          echo "MAVEN_ARGS_APPEND=$(params.MAVEN_ARGS_APPEND)" >> /env-vars/env-file

        [[ '$(params.MAVEN_MIRROR_URL)' != "" ]] &&
          echo "MAVEN_MIRROR_URL=$(params.MAVEN_MIRROR_URL)" >> /env-vars/env-file

        echo "Processing Build Environment Variables"

        for var in "$@"

        do
          echo "$var" >> /env-vars/env-file
        done


        s2i build $(params.PATH_CONTEXT)
        image-registry.openshift-image-registry.svc:5000/openshift/java:$(params.VERSION)
        \

        --image-scripts-url image:///usr/local/s2i \

        --as-dockerfile /gen-source/Dockerfile.gen --environment-file
        /env-vars/env-file
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source
        - mountPath: /env-vars
          name: env-vars
      workingDir: $(workspaces.source.path)
    - image: $(params.BUILDER_IMAGE)
      name: build-and-push
      resources: {}
      script: >
        buildah bud --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) \
           --layers -f /gen-source/Dockerfile.gen -t $(params.IMAGE) .

        [[ "$(params.SKIP_PUSH)" == "true" ]] && echo "Push skipped" && exit 0

        [[ "$(workspaces.dockerconfig.bound)" == "true" ]] && export
        DOCKER_CONFIG="$(workspaces.dockerconfig.path)"

        buildah push --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) \
          --digestfile $(workspaces.source.path)/image-digest $(params.IMAGE) \
          docker://$(params.IMAGE)

        cat $(workspaces.source.path)/image-digest | tee
        /tekton/results/IMAGE_DIGEST
      securityContext:
        capabilities:
          add:
            - SETFCAP
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /gen-source
          name: gen-source
      workingDir: /gen-source
  volumes:
    - emptyDir: {}
      name: varlibcontainers
    - emptyDir: {}
      name: gen-source
    - emptyDir: {}
      name: env-vars
  workspaces:
    - mountPath: /workspace/source
      name: source
    - name: dockerconfig
      optional: true
    - name: maven-settings
      mountPath: /maven-settings
      optional: true
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i
  namespace: pminkows-cicd
  labels:
    app.kubernetes.io/version: "0.3"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: image-build
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    Source-to-Image (S2I) is a toolkit and workflow for building reproducible
    container images from source code

    S2I produces images by injecting source code into a base S2I container image
    and letting the container prepare that source code for execution. The base
    S2I container images contains the language runtime and build tools needed for
    building and running the source code.

  params:
    - name: BUILDER_IMAGE
      description: The location of the s2i builder image.
    - name: IMAGE
      description: Reference of the image S2I will produce.
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
    - name: LOGLEVEL
      description: Log level when running the S2I binary
      default: "0"
  workspaces:
    - name: source
    - name: sslcertdir
      optional: true
    - name: dockerconfig
      description: >-
        An optional workspace that allows providing a .docker/config.json file
        for Buildah to access the container registry.
        The file should be placed at the root of the Workspace with name config.json.
      optional: true
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
  steps:
    - name: generate
      image: quay.io/openshift-pipeline/s2i:nightly
      workingDir: $(workspaces.source.path)
      command:
        - /usr/local/bin/s2i
        - --loglevel=$(params.LOGLEVEL)
        - build
        - $(params.PATH_CONTEXT)
        - $(params.BUILDER_IMAGE)
        - --as-dockerfile
        - /gen-source/Dockerfile.gen
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source
    - name: build
      image: quay.io/buildah/stable:v1.17.0
      workingDir: /gen-source
      script: |
        [[ "$(workspaces.sslcertdir.bound)" == "true" ]] && CERT_DIR_FLAG="--cert-dir $(workspaces.sslcertdir.path)"
        buildah ${CERT_DIR_FLAG} bud --tls-verify=$(params.TLSVERIFY) --layers \
          -f /gen-source/Dockerfile.gen -t $(params.IMAGE) .
        [[ "$(workspaces.dockerconfig.bound)" == "true" ]] && export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"
        buildah ${CERT_DIR_FLAG} push --tls-verify=$(params.TLSVERIFY) --digestfile $(workspaces.source.path)/image-digest \
          $(params.IMAGE) docker://$(params.IMAGE)
        cat $(workspaces.source.path)/image-digest | tee $(results.IMAGE_DIGEST.path)
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
        - mountPath: /gen-source
          name: gen-source
      securityContext:
        privileged: true
  volumes:
    - emptyDir: {}
      name: varlibcontainers
    - emptyDir: {}
      name: gen-source
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone
  labels:
    app.kubernetes.io/version: "0.9"
  annotations:
    tekton.dev/pipelines.minVersion: "0.38.0"
    tekton.dev/categories: Git
    tekton.dev/tags: git
    tekton.dev/displayName: "git clone"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
spec:
  description: >-
    These Tasks are Git tasks to work with repositories used by other tasks
    in your Pipeline.

    The git-clone Task will clone a repo from the provided url into the
    output Workspace. By default the repo will be cloned into the root of
    your Workspace. You can clone into a subdirectory by setting this Task's
    subdirectory param. This Task also supports sparse checkouts. To perform
    a sparse checkout, pass a list of comma separated directory patterns to
    this Task's sparseCheckoutDirectories param.
  workspaces:
    - name: output
      description: The git repo will be cloned onto the volume backing this Workspace.
    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
    - name: basic-auth
      optional: true
      description: |
        A Workspace containing a .gitconfig and .git-credentials file. These
        will be copied to the user's home before any git commands are run. Any
        other files in this Workspace are ignored. It is strongly recommended
        to use ssh-directory over basic-auth whenever possible and to bind a
        Secret to this Workspace over other volume types.
    - name: ssl-ca-directory
      optional: true
      description: |
        A workspace containing CA certificates, this will be used by Git to
        verify the peer with when fetching or pushing over HTTPS.
  params:
    - name: url
      description: Repository URL to clone from.
      type: string
    - name: revision
      description: Revision to checkout. (branch, tag, sha, ref, etc...)
      type: string
      default: ""
    - name: refspec
      description: Refspec to fetch before checking out revision.
      default: ""
    - name: submodules
      description: Initialize and fetch git submodules.
      type: string
      default: "true"
    - name: depth
      description: Perform a shallow clone, fetching only the most recent N commits.
      type: string
      default: "1"
    - name: sslVerify
      description: Set the `http.sslVerify` global git config. Setting this to `false` is not advised unless you are sure that you trust your git remote.
      type: string
      default: "true"
    - name: crtFileName
      description: file name of mounted crt using ssl-ca-directory workspace. default value is ca-bundle.crt.
      type: string
      default: "ca-bundle.crt"
    - name: subdirectory
      description: Subdirectory inside the `output` Workspace to clone the repo into.
      type: string
      default: ""
    - name: sparseCheckoutDirectories
      description: Define the directory patterns to match or exclude when performing a sparse checkout.
      type: string
      default: ""
    - name: deleteExisting
      description: Clean out the contents of the destination directory if it already exists before cloning.
      type: string
      default: "true"
    - name: httpProxy
      description: HTTP proxy server for non-SSL requests.
      type: string
      default: ""
    - name: httpsProxy
      description: HTTPS proxy server for SSL requests.
      type: string
      default: ""
    - name: noProxy
      description: Opt out of proxying HTTP/HTTPS requests.
      type: string
      default: ""
    - name: verbose
      description: Log the commands that are executed during `git-clone`'s operation.
      type: string
      default: "true"
    - name: gitInitImage
      description: The image providing the git-init binary that this Task runs.
      type: string
      default: "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.40.2"
    - name: userHome
      description: |
        Absolute path to the user's home directory.
      type: string
      default: "/home/git"
  results:
    - name: commit
      description: The precise commit SHA that was fetched by this Task.
    - name: url
      description: The precise URL that was fetched by this Task.
    - name: committer-date
      description: The epoch timestamp of the commit that was fetched by this Task.
  steps:
    - name: clone
      image: "$(params.gitInitImage)"
      env:
        - name: HOME
          value: "$(params.userHome)"
        - name: PARAM_URL
          value: $(params.url)
        - name: PARAM_REVISION
          value: $(params.revision)
        - name: PARAM_REFSPEC
          value: $(params.refspec)
        - name: PARAM_SUBMODULES
          value: $(params.submodules)
        - name: PARAM_DEPTH
          value: $(params.depth)
        - name: PARAM_SSL_VERIFY
          value: $(params.sslVerify)
        - name: PARAM_CRT_FILENAME
          value: $(params.crtFileName)
        - name: PARAM_SUBDIRECTORY
          value: $(params.subdirectory)
        - name: PARAM_DELETE_EXISTING
          value: $(params.deleteExisting)
        - name: PARAM_HTTP_PROXY
          value: $(params.httpProxy)
        - name: PARAM_HTTPS_PROXY
          value: $(params.httpsProxy)
        - name: PARAM_NO_PROXY
          value: $(params.noProxy)
        - name: PARAM_VERBOSE
          value: $(params.verbose)
        - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
          value: $(params.sparseCheckoutDirectories)
        - name: PARAM_USER_HOME
          value: $(params.userHome)
        - name: WORKSPACE_OUTPUT_PATH
          value: $(workspaces.output.path)
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
          value: $(workspaces.basic-auth.bound)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
          value: $(workspaces.basic-auth.path)
        - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
          value: $(workspaces.ssl-ca-directory.bound)
        - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
          value: $(workspaces.ssl-ca-directory.path)
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
      script: |
        #!/usr/bin/env sh
        set -eu

        if [ "${PARAM_VERBOSE}" = "true" ] ; then
          set -x
        fi

        if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
          chmod 400 "${PARAM_USER_HOME}/.git-credentials"
          chmod 400 "${PARAM_USER_HOME}/.gitconfig"
        fi

        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
          chmod 700 "${PARAM_USER_HOME}"/.ssh
          chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
        fi

        if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
           export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
           if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
              export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
           fi
        fi
        CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
          # or the root of a mounted volume.
          if [ -d "${CHECKOUT_DIR}" ] ; then
            # Delete non-hidden files and directories
            rm -rf "${CHECKOUT_DIR:?}"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "${CHECKOUT_DIR}"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "${CHECKOUT_DIR}"/..?*
          fi
        }

        if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
          cleandir || true
        fi

        test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
        test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
        test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

        git config --global --add safe.directory "${WORKSPACE_OUTPUT_PATH}"
        /ko-app/git-init \
          -url="${PARAM_URL}" \
          -revision="${PARAM_REVISION}" \
          -refspec="${PARAM_REFSPEC}" \
          -path="${CHECKOUT_DIR}" \
          -sslVerify="${PARAM_SSL_VERIFY}" \
          -submodules="${PARAM_SUBMODULES}" \
          -depth="${PARAM_DEPTH}" \
          -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
        cd "${CHECKOUT_DIR}"
        RESULT_SHA="$(git rev-parse HEAD)"
        EXIT_CODE="$?"
        if [ "${EXIT_CODE}" != 0 ] ; then
          exit "${EXIT_CODE}"
        fi
        RESULT_COMMITTER_DATE="$(git log -1 --pretty=%ct)"
        printf "%s" "${RESULT_COMMITTER_DATE}" > "$(results.committer-date.path)"
        printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
        printf "%s" "${PARAM_URL}" > "$(results.url.path)"